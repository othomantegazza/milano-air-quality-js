---
title: "Milano Air Quality Dashboard"
editor_options: 
  chunk_output_type: console
---

```{r notes}
#| include: false
# https://www.eea.europa.eu/themes/air/air-quality-concentrations/AirQlimitvalues.png
# https://environment.ec.europa.eu/topics/air/air-quality/eu-air-quality-standards_en
# https://dati.comune.milano.it/dataset/ds573-valori-rilevati-per-i-principali-inquinanti-dell-aria
```

```{ojs jspackages}
d3 = require("d3@7")
```


```{r rpackages}
#| include: false
library(tidyverse)
library(here)
library(tsibble)
library(lubridate)
library(janitor)
```

```{r, pollutants}
#| include: false
# from https://environment.ec.europa.eu/topics/air/air-quality/eu-air-quality-standards_en
pollutants <- 
  tribble(~inquinante, ~pollutant_name, ~eu_limits,
          'C6H6', 'Polycyclic Aromatic Hydrocarbons', 1e-3,
          'CO_8h', 'Carbon monoxide', 1e4,
          'NO2', 'Nitrogen dioxide', 40,
          'O3', 'Ozone', 120,
          'PM10', 'Particulate matter', 40,
          'PM25', 'Fine particles', 20,
          'SO2', 'Sulphur dioxide', 125,
          )
```

```{r}
#| include: false
air_q_url <-
  'data/aq.csv'

air_q <- 
  air_q_url %>% 
  readr::read_csv() %>% 
  janitor::clean_names() %>% 
  rename(date = data) %>% 
  mutate(date = date %>% as_date()) %>% 
  # guessing real order of magnitude of measuremnts
  mutate(valore = valore %>% {
    case_when(inquinante == 'C6H6' ~ . * 1e-3,
              inquinante == 'CO_8h' ~ . * 1e3,
              TRUE ~ .)
  })

ozone <- 
  air_q %>% 
  filter(inquinante == 'O3') %>% 
  drop_na()

ojs_define(ozone_in = ozone)
```

```{ojs}
ozone = transpose(ozone_in)
```

```{ojs}
ozone
```


```{ojs}
d3.map
```

```{ojs}
d3.map(ozone, d => d.date)
```


```{ojs}
Plot.plot({
  grid: true,
  marks: [
    Plot.dot(ozone, {x: "id", y: "valore"})
  ]
})
```

```{ojs}
chart = Scatterplot(ozone, {
  x: d => d.date    ,
  y: d => d.valore,
  xLabel: "Miles per gallon →",
  yLabel: "↑ Horsepower",
  stroke: "steelblue",
  width,
  height: 600
})
```


```{ojs}
// Copyright 2021 Observable, Inc.
// Released under the ISC license.
// https://observablehq.com/@d3/scatterplot
function Scatterplot(data, { 
  x = ([x]) => x, // given d in data, returns the (quantitative) x-value
  y = ([, y]) => y, // given d in data, returns the (quantitative) y-value
  r = 3, // (fixed) radius of dots, in pixels
  title, // given d in data, returns the title
  marginTop = 20, // top margin, in pixels
  marginRight = 30, // right margin, in pixels
  marginBottom = 30, // bottom margin, in pixels
  marginLeft = 40, // left margin, in pixels
  inset = r * 2, // inset the default range, in pixels
  insetTop = inset, // inset the default y-range
  insetRight = inset, // inset the default x-range
  insetBottom = inset, // inset the default y-range
  insetLeft = inset, // inset the default x-range
  width = 640, // outer width, in pixels
  height = 400, // outer height, in pixels
  xType = d3.scaleLinear, // type of x-scale
  xDomain, // [xmin, xmax]
  xRange = [marginLeft + insetLeft, width - marginRight - insetRight], // [left, right]
  yType = d3.scaleLinear, // type of y-scale
  yDomain, // [ymin, ymax]
  yRange = [height - marginBottom - insetBottom, marginTop + insetTop], // [bottom, top]
  xLabel, // a label for the x-axis
  yLabel, // a label for the y-axis
  xFormat, // a format specifier string for the x-axis
  yFormat, // a format specifier string for the y-axis
  fill = "none", // fill color for dots
  stroke = "currentColor", // stroke color for the dots
  strokeWidth = 1.5, // stroke width for dots
  halo = "#fff", // color of label halo 
  haloWidth = 3 // padding around the labels
} = {}) {
  // Compute values.
  console.log(data)
  console.log(d3)
  console.log(d3.map)
  console.log(data.id)
  console.log(d3.map(data, d => d.id))
  console.log('here')
  const X = d3.map(data, x);
  const Y = d3.map(data, y);
  const T = title == null ? null : d3.map(data, title);
  const I = d3.range(X.length).filter(i => !isNaN(X[i]) && !isNaN(Y[i]));

  // Compute default domains.
  if (xDomain === undefined) xDomain = d3.extent(X);
  if (yDomain === undefined) yDomain = d3.extent(Y);

  // Construct scales and axes.
  const xScale = xType(xDomain, xRange);
  const yScale = yType(yDomain, yRange);
  const xAxis = d3.axisBottom(xScale).ticks(width / 80, xFormat);
  const yAxis = d3.axisLeft(yScale).ticks(height / 50, yFormat);

  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

  svg.append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)
      .call(xAxis)
      .call(g => g.select(".domain").remove())
      .call(g => g.selectAll(".tick line").clone()
          .attr("y2", marginTop + marginBottom - height)
          .attr("stroke-opacity", 0.1))
      .call(g => g.append("text")
          .attr("x", width)
          .attr("y", marginBottom - 4)
          .attr("fill", "currentColor")
          .attr("text-anchor", "end")
          .text(xLabel));

  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(yAxis)
      .call(g => g.select(".domain").remove())
      .call(g => g.selectAll(".tick line").clone()
          .attr("x2", width - marginLeft - marginRight)
          .attr("stroke-opacity", 0.1))
      .call(g => g.append("text")
          .attr("x", -marginLeft)
          .attr("y", 10)
          .attr("fill", "currentColor")
          .attr("text-anchor", "start")
          .text(yLabel));

  if (T) svg.append("g")
      .attr("font-family", "sans-serif")
      .attr("font-size", 10)
      .attr("stroke-linejoin", "round")
      .attr("stroke-linecap", "round")
    .selectAll("text")
    .data(I)
    .join("text")
      .attr("dx", 7)
      .attr("dy", "0.35em")
      .attr("x", i => xScale(X[i]))
      .attr("y", i => yScale(Y[i]))
      .text(i => T[i])
      .call(text => text.clone(true))
      .attr("fill", "none")
      .attr("stroke", halo)
      .attr("stroke-width", haloWidth);

  svg.append("g")
      .attr("fill", fill)
      .attr("stroke", stroke)
      .attr("stroke-width", strokeWidth)
    .selectAll("circle")
    .data(I)
    .join("circle")
      .attr("cx", i => xScale(X[i]))
      .attr("cy", i => yScale(Y[i]))
      .attr("r", r);

  return svg.node();
}
```


